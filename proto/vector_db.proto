syntax = "proto3";

package vector_db;

// 向量数据库分布式服务
service VectorDbService {
    // 向量操作
    rpc UpsertVector(UpsertVectorRequest) returns (UpsertVectorResponse);
    rpc DeleteVector(DeleteVectorRequest) returns (DeleteVectorResponse);
    rpc SearchVectors(SearchVectorRequest) returns (SearchVectorResponse);
    rpc GetVector(GetVectorRequest) returns (GetVectorResponse);
    
    // 文档操作
    rpc AddDocument(AddDocumentRequest) returns (AddDocumentResponse);
    rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);
    rpc SearchDocuments(SearchDocumentRequest) returns (SearchDocumentResponse);
    rpc DeleteDocument(DeleteDocumentRequest) returns (DeleteDocumentResponse);
    
    // 集群管理
    rpc JoinCluster(JoinClusterRequest) returns (JoinClusterResponse);
    rpc LeaveCluster(LeaveClusterRequest) returns (LeaveClusterResponse);
    rpc GetClusterInfo(GetClusterInfoRequest) returns (GetClusterInfoResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    
    // Raft 共识
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
    
    // 分片管理
    rpc MigrateShard(MigrateShardRequest) returns (MigrateShardResponse);
    rpc RebalanceShards(RebalanceShardsRequest) returns (RebalanceShardsResponse);
    rpc GetShardInfo(GetShardInfoRequest) returns (GetShardInfoResponse);
    
    // 监控和统计
    rpc GetStats(GetStatsRequest) returns (GetStatsResponse);
    rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
}

// 基础数据结构
message Vector {
    repeated float values = 1;
}

message Point {
    string id = 1;
    Vector vector = 2;
    map<string, string> payload = 3;
}

message Document {
    string id = 1;
    string content = 2;
    optional string title = 3;
    optional string language = 4;
    optional string package_name = 5;
    optional string version = 6;
    optional string doc_type = 7;
    map<string, string> metadata = 8;
}

message SearchResult {
    string document_id = 1;
    string title = 2;
    string content_snippet = 3;
    float similarity_score = 4;
    string package_name = 5;
    string doc_type = 6;
    map<string, string> metadata = 7;
}

// 向量操作请求/响应
message UpsertVectorRequest {
    Point point = 1;
}

message UpsertVectorResponse {
    bool success = 1;
    optional string error = 2;
}

message DeleteVectorRequest {
    string point_id = 1;
}

message DeleteVectorResponse {
    bool deleted = 1;
    optional string error = 2;
}

message SearchVectorRequest {
    Vector query_vector = 1;
    uint32 limit = 2;
    optional float threshold = 3;
    optional string filter = 4; // JSON字符串
}

message SearchVectorResponse {
    repeated Point results = 1;
    double query_time_ms = 2;
    optional string error = 3;
}

message GetVectorRequest {
    string point_id = 1;
}

message GetVectorResponse {
    optional Point point = 1;
    optional string error = 2;
}

// 文档操作请求/响应
message AddDocumentRequest {
    Document document = 1;
}

message AddDocumentResponse {
    string document_id = 1;
    optional string error = 2;
}

message GetDocumentRequest {
    string document_id = 1;
}

message GetDocumentResponse {
    optional Document document = 1;
    optional string error = 2;
}

message SearchDocumentRequest {
    string query = 1;
    uint32 limit = 2;
    optional string filter = 3;
}

message SearchDocumentResponse {
    repeated SearchResult results = 1;
    double query_time_ms = 2;
    uint32 total_matches = 3;
    optional string error = 4;
}

message DeleteDocumentRequest {
    string document_id = 1;
}

message DeleteDocumentResponse {
    bool deleted = 1;
    optional string error = 2;
}

// 集群管理
message NodeInfo {
    string id = 1;
    string address = 2;
    uint32 port = 3;
    string state = 4; // "Healthy", "Unhealthy", "Offline"
    uint64 last_heartbeat = 5;
    map<string, string> metadata = 6;
    NodeLoad load = 7;
}

message NodeLoad {
    double cpu_usage = 1;
    double memory_usage = 2;
    double disk_usage = 3;
    uint64 request_count = 4;
    double avg_latency_ms = 5;
    uint64 vector_count = 6;
}

message JoinClusterRequest {
    NodeInfo node = 1;
    string cluster_token = 2;
}

message JoinClusterResponse {
    bool success = 1;
    repeated NodeInfo cluster_nodes = 2;
    optional string error = 3;
}

message LeaveClusterRequest {
    string node_id = 1;
}

message LeaveClusterResponse {
    bool success = 1;
    optional string error = 2;
}

message GetClusterInfoRequest {}

message GetClusterInfoResponse {
    repeated NodeInfo nodes = 1;
    optional string leader_id = 2;
    uint64 version = 3;
    optional string error = 4;
}

message HeartbeatRequest {
    string node_id = 1;
    NodeLoad load = 2;
    int64 timestamp = 3;
}

message HeartbeatResponse {
    bool success = 1;
    optional string error = 2;
}

// Raft 共识协议
message LogEntry {
    uint64 index = 1;
    uint64 term = 2;
    string entry_type = 3; // "Normal", "Configuration", "Snapshot"
    bytes data = 4;
    int64 timestamp = 5;
}

message AppendEntriesRequest {
    uint64 term = 1;
    string leader_id = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated LogEntry entries = 5;
    uint64 leader_commit = 6;
}

message AppendEntriesResponse {
    uint64 term = 1;
    bool success = 2;
    uint64 match_index = 3;
    optional string error = 4;
}

message RequestVoteRequest {
    uint64 term = 1;
    string candidate_id = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message RequestVoteResponse {
    uint64 term = 1;
    bool vote_granted = 2;
    optional string error = 3;
}

message InstallSnapshotRequest {
    uint64 term = 1;
    string leader_id = 2;
    uint64 last_included_index = 3;
    uint64 last_included_term = 4;
    bytes data = 5;
    bool done = 6;
}

message InstallSnapshotResponse {
    uint64 term = 1;
    bool success = 2;
    optional string error = 3;
}

// 分片管理
message ShardInfo {
    uint32 id = 1;
    string primary_node = 2;
    repeated string replica_nodes = 3;
    string state = 4; // "Active", "Migrating", "Splitting"
    ShardRange range = 5;
}

message ShardRange {
    uint64 start_hash = 1;
    uint64 end_hash = 2;
}

message MigrateShardRequest {
    uint32 shard_id = 1;
    string target_node = 2;
}

message MigrateShardResponse {
    bool success = 1;
    optional string error = 2;
}

message RebalanceShardsRequest {
    repeated string cluster_nodes = 1;
}

message RebalanceShardsResponse {
    repeated ShardMigration migrations = 1;
    optional string error = 2;
}

message ShardMigration {
    uint32 shard_id = 1;
    string from_node = 2;
    string to_node = 3;
    string reason = 4;
    uint64 estimated_size = 5;
    uint64 estimated_duration = 6;
}

message GetShardInfoRequest {
    uint32 shard_id = 1;
}

message GetShardInfoResponse {
    optional ShardInfo shard = 1;
    optional string error = 2;
}

// 监控和统计
message GetStatsRequest {}

message DatabaseStats {
    uint32 document_count = 1;
    uint32 dense_vector_count = 2;
    uint32 sparse_vector_count = 3;
    double memory_usage_mb = 4;
    double dense_index_size_mb = 5;
    double sparse_index_size_mb = 6;
    double cache_hit_rate = 7;
}

message GetStatsResponse {
    DatabaseStats stats = 1;
    optional string error = 2;
}

message GetMetricsRequest {}

message PerformanceMetrics {
    double avg_query_time_ms = 1;
    double p95_query_time_ms = 2;
    double p99_query_time_ms = 3;
    uint64 total_queries = 4;
    double queries_per_second = 5;
    uint64 cache_hits = 6;
    uint64 cache_misses = 7;
    double memory_usage_mb = 8;
}

message GetMetricsResponse {
    PerformanceMetrics metrics = 1;
    optional string error = 2;
} 